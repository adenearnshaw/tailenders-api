// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TailendersApi.Repository;

namespace TailendersApi.Repository.Migrations
{
    [DbContext(typeof(TailendersContext))]
    [Migration("20181205171708_AddingMatches")]
    partial class AddingMatches
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("TailendersApi.Repository.Entities.MatchContactPreferenceEntity", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("ContactDetailsVisible");

                    b.Property<string>("MatchId");

                    b.Property<string>("ProfileId");

                    b.HasKey("Id");

                    b.HasIndex("MatchId");

                    b.HasIndex("ProfileId");

                    b.ToTable("MatchContactPreferences");
                });

            modelBuilder.Entity("TailendersApi.Repository.Entities.MatchEntity", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("MatchedAt");

                    b.HasKey("Id");

                    b.ToTable("Matches");
                });

            modelBuilder.Entity("TailendersApi.Repository.Entities.PairingEntity", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("IsBlocked");

                    b.Property<bool>("IsLiked");

                    b.Property<DateTime>("LastUpdated");

                    b.Property<string>("PairedProfileId");

                    b.Property<string>("ProfileId");

                    b.HasKey("Id");

                    b.HasIndex("ProfileId");

                    b.ToTable("Pairings");
                });

            modelBuilder.Entity("TailendersApi.Repository.Entities.ProfileEntity", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Age");

                    b.Property<string>("Bio");

                    b.Property<string>("ContactDetails");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int>("FavouritePosition");

                    b.Property<int>("Gender");

                    b.Property<double>("Latitude");

                    b.Property<string>("Location");

                    b.Property<double>("Longitude");

                    b.Property<string>("Name");

                    b.Property<int>("SearchForCategory");

                    b.Property<int>("SearchMaxAge");

                    b.Property<int>("SearchMinAge");

                    b.Property<int>("SearchRadius");

                    b.Property<bool>("ShowAge");

                    b.Property<DateTime>("UpdatedAt");

                    b.HasKey("Id");

                    b.ToTable("Profiles");
                });

            modelBuilder.Entity("TailendersApi.Repository.Entities.ProfileImageEntity", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ImageUrl");

                    b.Property<DateTime>("LastUpdated");

                    b.Property<string>("ProfileId");

                    b.HasKey("Id");

                    b.HasIndex("ProfileId");

                    b.ToTable("ProfileImages");
                });

            modelBuilder.Entity("TailendersApi.Repository.Entities.ProfileMatchEntity", b =>
                {
                    b.Property<string>("ProfileId");

                    b.Property<string>("MatchId");

                    b.HasKey("ProfileId", "MatchId");

                    b.HasIndex("MatchId");

                    b.ToTable("ProfileMatches");
                });

            modelBuilder.Entity("TailendersApi.Repository.Entities.MatchContactPreferenceEntity", b =>
                {
                    b.HasOne("TailendersApi.Repository.Entities.MatchEntity", "Match")
                        .WithMany("MatchContactPreferences")
                        .HasForeignKey("MatchId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("TailendersApi.Repository.Entities.ProfileEntity", "Profile")
                        .WithMany("MatchContactPreferences")
                        .HasForeignKey("ProfileId");
                });

            modelBuilder.Entity("TailendersApi.Repository.Entities.PairingEntity", b =>
                {
                    b.HasOne("TailendersApi.Repository.Entities.ProfileEntity", "Profile")
                        .WithMany("Pairings")
                        .HasForeignKey("ProfileId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TailendersApi.Repository.Entities.ProfileImageEntity", b =>
                {
                    b.HasOne("TailendersApi.Repository.Entities.ProfileEntity", "Profile")
                        .WithMany("ProfileImages")
                        .HasForeignKey("ProfileId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TailendersApi.Repository.Entities.ProfileMatchEntity", b =>
                {
                    b.HasOne("TailendersApi.Repository.Entities.MatchEntity", "Match")
                        .WithMany("ProfileMatches")
                        .HasForeignKey("MatchId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("TailendersApi.Repository.Entities.ProfileEntity", "Profile")
                        .WithMany("ProfileMatches")
                        .HasForeignKey("ProfileId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
